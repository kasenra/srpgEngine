extends Node
enum DAMAGE_TYPE {PHYSICAL, MAGICAL}
enum WEAPON_TYPE {SWORD, LANCE, AXE, DAGGER, BALLISTA, BOW, LIGHT, GREY, DARK, MONSTER}
enum STAT {NONE, HP, MHP, STR, MAG, SPD, SKL, DEF, RES, LCK, MOV}
enum TERRAIN {NONE, PATH, LIGHTCOVER, HEAVYCOVER, LIGHTFORTIFY, HEAVYFORTIFY, HEAL, FLYING, IMPASSABLE}
enum MOVETYPE {INFANTRY, CAVALRY, ARMOR, FLYING, ATTACK}
enum UNITTYPE {NONE, BEAST, ARMOR, FLYING, MONSTER, DRAGON}
enum PROFICIENCY {E, D, C, B, A, S}
enum CLASS_TIER {BASIC, PROMOTE, MASTER}
enum SUPPORT {NONE, D, C, B, A, S}
enum TEAM {PLAYER, ENEMY, ALLY}
enum SPECIES {HUMAN, DEMON, DEVIL, CONDEMNED}
enum GENDER {FEMALE, MALE, NONBINARY, NEITHER, UNKNOWN, UNKNOWABLE}
enum SUPPORT_STANCE {NONE, OFFENSE, DEFENSE}

# Advantage in the triangle of Noble -> Brute -> Martial gives a signficant bonus
var WEAPON_TRIANGLE: Dictionary[WEAPON_TYPE, Array] = { ## Defines the weapon triangle. Input weapon, output every type it beats.
	WEAPON_TYPE.SWORD: 		[WEAPON_TYPE.AXE],
	WEAPON_TYPE.LANCE: 		[WEAPON_TYPE.SWORD],
	WEAPON_TYPE.AXE: 		[WEAPON_TYPE.LANCE],
	WEAPON_TYPE.DAGGER: 	[WEAPON_TYPE.BOW],
	WEAPON_TYPE.BALLISTA: 	[WEAPON_TYPE.DAGGER],
	WEAPON_TYPE.BOW: 		[WEAPON_TYPE.BALLISTA],
	WEAPON_TYPE.LIGHT: 		[WEAPON_TYPE.DARK],
	WEAPON_TYPE.GREY: 		[WEAPON_TYPE.LIGHT],
	WEAPON_TYPE.DARK: 		[WEAPON_TYPE.GREY],
	WEAPON_TYPE.MONSTER:	[]
}
# Terrains give the defender bonuses to EVASION, PROT, AND AUTOHEALING (%)
# 1-3 are used in battle logic, 4 is used in the start of turn loop
var TERRAIN_COMBAT: Dictionary[TERRAIN, Vector3i] = { ## Stat Effects of Terrain Types : (Avoid, Prot, Healing % On Turn Start)
	TERRAIN.NONE : 			Vector3i(0,0,0),
	TERRAIN.PATH :			Vector3i(-10,0,0),
	TERRAIN.LIGHTCOVER : 	Vector3i(20,0,0),
	TERRAIN.HEAVYCOVER : 	Vector3i(30,0,0),
	TERRAIN.LIGHTFORTIFY : 	Vector3i(10,1,10),
	TERRAIN.HEAVYFORTIFY : 	Vector3i(20,2,20),
	TERRAIN.HEAL :			Vector3i(0,0,30),
	TERRAIN.FLYING :		Vector3i(0,0,0),
	TERRAIN.IMPASSABLE :	Vector3i(0,0,-10)
}

var TERRAIN_MOVE : Dictionary[Vector2i, float] = { ## Movement Costs by (Terrain Type, Unit Type)
	Vector2i(TERRAIN.NONE, MOVETYPE.INFANTRY) : 1,
	Vector2i(TERRAIN.NONE, MOVETYPE.CAVALRY) : 1,
	Vector2i(TERRAIN.NONE, MOVETYPE.ARMOR) : 1,
	Vector2i(TERRAIN.NONE, MOVETYPE.FLYING) : 1,
	Vector2i(TERRAIN.NONE, MOVETYPE.ATTACK) : 1,
	
	Vector2i(TERRAIN.PATH, MOVETYPE.INFANTRY) : 0.75,
	Vector2i(TERRAIN.PATH, MOVETYPE.CAVALRY) : 0.8,
	Vector2i(TERRAIN.PATH, MOVETYPE.ARMOR) : 0.75,
	Vector2i(TERRAIN.PATH, MOVETYPE.FLYING) : 1,
	Vector2i(TERRAIN.PATH, MOVETYPE.ATTACK) : 1,
	
	Vector2i(TERRAIN.LIGHTCOVER, MOVETYPE.INFANTRY) : 2,
	Vector2i(TERRAIN.LIGHTCOVER, MOVETYPE.CAVALRY) : 3,
	Vector2i(TERRAIN.LIGHTCOVER, MOVETYPE.ARMOR) : 3,
	Vector2i(TERRAIN.LIGHTCOVER, MOVETYPE.FLYING) : 1,
	Vector2i(TERRAIN.LIGHTCOVER, MOVETYPE.ATTACK) : 1,
	
	Vector2i(TERRAIN.HEAVYCOVER, MOVETYPE.INFANTRY) : 4,
	Vector2i(TERRAIN.HEAVYCOVER, MOVETYPE.CAVALRY) : 999,
	Vector2i(TERRAIN.HEAVYCOVER, MOVETYPE.ARMOR) : 999,
	Vector2i(TERRAIN.HEAVYCOVER, MOVETYPE.FLYING) : 1,
	Vector2i(TERRAIN.HEAVYCOVER, MOVETYPE.ATTACK) : 1,
	
	Vector2i(TERRAIN.LIGHTFORTIFY, MOVETYPE.INFANTRY) : 2,
	Vector2i(TERRAIN.LIGHTFORTIFY, MOVETYPE.CAVALRY) : 2,
	Vector2i(TERRAIN.LIGHTFORTIFY, MOVETYPE.ARMOR) : 2,
	Vector2i(TERRAIN.LIGHTFORTIFY, MOVETYPE.FLYING) : 1,
	Vector2i(TERRAIN.LIGHTFORTIFY, MOVETYPE.ATTACK) : 1,
	
	Vector2i(TERRAIN.HEAVYFORTIFY, MOVETYPE.INFANTRY) : 2,
	Vector2i(TERRAIN.HEAVYFORTIFY, MOVETYPE.CAVALRY) : 2,
	Vector2i(TERRAIN.HEAVYFORTIFY, MOVETYPE.ARMOR) : 2,
	Vector2i(TERRAIN.HEAVYFORTIFY, MOVETYPE.FLYING) : 1,
	Vector2i(TERRAIN.HEAVYFORTIFY, MOVETYPE.ATTACK) : 1,

	Vector2i(TERRAIN.HEAL, MOVETYPE.INFANTRY) : 1,
	Vector2i(TERRAIN.HEAL, MOVETYPE.CAVALRY) : 1,
	Vector2i(TERRAIN.HEAL, MOVETYPE.ARMOR) : 1,
	Vector2i(TERRAIN.HEAL, MOVETYPE.FLYING) : 1,
	Vector2i(TERRAIN.HEAL, MOVETYPE.ATTACK) : 1,
	
	Vector2i(TERRAIN.FLYING, MOVETYPE.INFANTRY) : 999,
	Vector2i(TERRAIN.FLYING, MOVETYPE.CAVALRY) : 999,
	Vector2i(TERRAIN.FLYING, MOVETYPE.ARMOR) : 999,
	Vector2i(TERRAIN.FLYING, MOVETYPE.FLYING) : 1,
	Vector2i(TERRAIN.FLYING, MOVETYPE.ATTACK) : 1,
	
	Vector2i(TERRAIN.IMPASSABLE, MOVETYPE.INFANTRY) : 999,
	Vector2i(TERRAIN.IMPASSABLE, MOVETYPE.CAVALRY) : 999,
	Vector2i(TERRAIN.IMPASSABLE, MOVETYPE.ARMOR) : 999,
	Vector2i(TERRAIN.IMPASSABLE, MOVETYPE.FLYING) : 999,
	Vector2i(TERRAIN.IMPASSABLE, MOVETYPE.ATTACK) : 999,
}

var supportCutoffs : Dictionary[SUPPORT, int] = { ## Cutoffs for support tiers. Total Placeholders right now.
		# Supports are limited per chapter
		#	Best Earner gets a max of 10
		#	Second Best gets a max of 5
		#	All others get a max of 2
		#		Excess points are discarded
		SUPPORT.D : 5,
		SUPPORT.C : 15,
		SUPPORT.B : 30,
		SUPPORT.A : 45,
		SUPPORT.S : 60
}

func supportRank(p : int) -> SUPPORT:
	if p >= supportCutoffs[SUPPORT.S]:
		return SUPPORT.S
	elif p >= supportCutoffs[SUPPORT.A]:
		return SUPPORT.A
	elif p >= supportCutoffs[SUPPORT.B]:
		return SUPPORT.B
	elif p >= supportCutoffs[SUPPORT.C]:
		return SUPPORT.C
	elif p >= supportCutoffs[SUPPORT.D]:
		return SUPPORT.D
	return SUPPORT.NONE
